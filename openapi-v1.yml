openapi: '3.0.2'
info:
  title: API Brix
  version: '1.0'
  contact: 
    name: Suporte Brix
    email: marcioamr@gmail.com
    url: https://www.brix.dev.br
  description: |
    Faça a gestão completa de sua carteira de cobrança bancária por meio da emissão e gestão de cobranças bancárias e cobranças por Pix.
    
    Integre facilmente seu e-commerce ou solução de POS de forma super simples e eficiente utilizando a nossa API Brix.

    ## Introdução

    Crie a sua conta conosco agora mesmo e comece a receber imediatamente por Pix na sua conta de preferência, onde a sua empresa possui alguma chave cadastrada.

    No momento a nossa biblioteca está integrada ao [Banco do Brasil](https://www.bb.com.br). Outra instituições estão sendo incorporadas gradativamente à Plataforma.

    ### Pix
    Pix é novo sistema de pagamentos instantâneos brasileiros criado em 2020 que permite, por meio de um QR Code padronizado ou código/texto chamado de Copia e Cola receber imediatamente e 24 hrs por dia de seus clientes a um baixíssimo custo.
    #### Chave Pix
    Chave Pix é o identificador do cliente no arranjo do Pix. É por meio dele que a instituição pagadora saberá para qual instituição ele deverá enviar o dinheiro. Pode ser um CPF, CNPJ, e-mail ou um número aleatório gerado no momento da sua criação. A chave Pix deve ser criada junto à instituição onde espera receber o dinheiro.

    ### Boleto Bancário (em breve)
    É uma forma padronizada pelo Sistema Financeiro Brasilieiro para permitir as empresas a arrecadação/recebimento de títulos por meio de um código de barras padronizada e amplamente utilizado.

    ## Primeiros Passos
    O primeiro passo necessário para utilizar o componente do Brix é criar uma conta na platatorma, que ainda está em construção. Neste momento é necessário solicitar a criação destas credenciais por meio do e-mail marcioamr@gmail.com.
    Com a conta criada vocë receberá um token para permitir consumir as API por meio do método de autenticação do `API Key`. 

    A segunda etapa é cadastrar uma chave na Plataforma. A chave a ser criada necessariamente tem que existir na instituição onde deseja receber. Neste momento será necessário informar as suas credenciais de acesso à API no PSP onde possui a chave.

    ## Tratamento de Erros
    O Brix utiliza a arquitetura RESTful que se baseia no protocolo HTTP e o retorno de toda transação possui um código com semântica que permite definir se a transação foi realizada com sucesso ou não.

    As respostas de erro incluem no corpo detalhes do erro seguindo o schema da RFC [Problem Details for HTTP APIs](https://tools.ietf.org/html/rfc7807).

    Abaixo os erros gerados pela solução:

    - `Forbidden`  - Requisição de participante autenticado que viola alguma regra de autorização.     Ver [rfc7231](https://tools.ietf.org/html/rfc7231#section-6.5.3).
    - `BadRequest`  -  Requisição com formato inválido.    Ver [rfc7231](https://tools.ietf.org/html/rfc7231#section-6.5.1)
    - `NotFound`  - Entidade não encontrada.     Ver [rfc7231](https://tools.ietf.org/html/rfc7231#section-6.5.4)
    - `RateLimited`  - Limite de requisições foi atingido.     Ver seção sobre [limitação de requisições](#section/Seguranca/Limitacao-de-requisicoes)
    - `InternalServerError`  - Condição inesperada ao processar requisição.    Ver [rfc7231](https://tools.ietf.org/html/rfc7231#section-6.6.1)
    - `ServiceUnavailable`  - Serviço não está disponível no momento. Serviço solicitado pode estar em manutenção ou fora    da janela de funcionamento.
x-tagGroups: 
  - name: Recursos disponíveis
    tags: 
      - cobranca
      - webhook
servers:
  - url: 'https://api.server.test/v1'
    description: Servidor de API do Brix de produção
tags:    
  - name: cobranca
    x-displayName: Cobrança
    description: Recurso utilizado para o cadastro e manutenção de cobranças, que podem ser do tipo boleto, Pix ou misto.
  - name: webhook
    x-displayName: "Webhook"
    description: Recurso que permite que eventos, a exemplo da criação ou pagamento de um Pix, sejam enviados para uma URL previamente cadastrada.
  - name: usuario
    x-displayName: usuário
    description: Recurso utilizado para a gestão de usuários.
components:
  securitySchemes:
    Autenticação Básica:
      type: http
      scheme: basic
      in: header
      description: 
        Esquema básico de autenticação onde se invoca um endpoint com o `header` `Authorization` com as credenciais separados por ":" (`username:password`) em formato Base64. <br><br>
        Opção utilizada para a criação de token JWT a ser utilizada para consumir as API disponibilizadas por meio do método `Bearer Authentication`.
    Autenticação Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: header
      description: |
        Esquema de autenticação baseado em HTTP, também chamado Bearer Token, onde a cada requisição é passado o token no header `Authorization` a palavra `Bearer ` mais o token.
        O token é adquirido após a autenticação (login) utilizando o método `Basic Authentication`.
    API Key:
      type: API Key
      name: api-key
      in: header
      description: |
        Esquema de autenticação baseado em HTTP onde a cada requisição é passado o token no header `Api-Key`.
        O token é único e gerado no momento da criação do login do usuário.
  responses:
    Forbidden:
      description: Do not have appropriate permissions
      content:
        application/json": 
          schema: 
              "$ref": "#/components/schemas/Error"
    Unauthorized:
      description: No access token provided
      content:
        application/json": 
          schema: 
              "$ref": "#/components/schemas/Error"
    BadRequest:
      description: Invalid or missing parameters in URL or request body
      content:
        application/json": 
          schema: 
              "$ref": "#/components/schemas/Error"
    NotFound:
      description: Resource not found
      content:
        application/json": 
          schema: 
              "$ref": "#/components/schemas/Error"
    TooLarge:
      description: Content too large
      content:
        application/json": 
          schema: 
              "$ref": "#/components/schemas/Error"
    NotImplemented:
      description: Feature is disabled
      content:
        application/json": 
          schema: 
              "$ref": "#/components/schemas/Error"
    TooManyRequests:
      description: Too many requests
      content:
        application/json": 
          schema: 
              "$ref": "#/components/schemas/Error"
    InternalServerError:
      description: Something went wrong with the server
      content:
        application/json": 
          schema: 
              "$ref": "#/components/schemas/Error"
  schemas:
    Cobranca:
      type: object
      properties:
        idCobranca:
          type: string
          description: Identificador único da cobrança. Obrigatório apenas quando estiver consultando ou alterando.
        tipoCobranca:
          type: string
          description: Tipo de cobrança. Aceita os valores PIX, BOLETO e BOLETO_PIX. Apenas a opção PIX está disponível.
          example: PIX
        chavePix:
          type: string
          description: |
            Chave Pix do recebedor. Define para qual chave Pix o pagamento deve ser direcionado.
            Pode ser e-mail, CPF, CPNJ, telefone celular e um identificador único. A chave deve existir 
            associado às credenciais informadas para a integração. 
            #### Campo obrigatório quando o `tipoCobranca` informado é do tipo PIX ou BOLETO_PIX.
          example: email@domain.com
          minLength: 10
          maxLength: 150
        valor:
          type: number
          format: double
          description: Valor financeiro da cobrança.
          example: 102.23
          minimum: 0.01
        dataVencimento:
          type: string
          description: Data de vencimento da cobrança.
          format: date-time
          example: '2020-10-19T16:46:45Z'
        dataPagamento:
          type: string
          format: date-time
          description: Data de confirmação do pagamento pela instituição financeira do pagador.
          example: '2020-10-19T16:46:45Z'
          nullable: true
        dataCancelamento:
          type: string
          format: date-time
          description: Data de cancelamento da cobrança.
          example: '2020-10-19T16:46:45Z'
          nullable: true
        beneficiarioNome:
          type: string
          description: Nome do beneficiário.
          example: 'Fulano de Tal'
          minLength: 5
          maxLength: 150
          nullable: true
        beneficiarioCpfCnpj:
          type: string
          description: CPF ou CNPJ válido da pessoa física ou jurídica.
          example: 12312312312
          minLength: 11
          maxLength: 14
          nullable: true
        descricaoCobranca:
          type: string
          description: Campo observação a ser exibido para o usuário pagador.
          example: Pizaria
          minLength: 3
          maxLength: 100
          nullable: true
        txidPix:
          type: string
          description: Identificador único da transação. Não pode ser repetir para a mesma chave. Necessariamente deve possuir 26 posições alfanumérica. Se não informado o sistema irá gerar um identificador aleatório.
          example: bNci7Rdi6BSrLLRkh7dmQt7Nkd
          minLength: 26
          maxLength: 26
          nullable: true
      required:
        - tipoCobranca
        - valor
    Webhook:
      type: object
      properties:
        id:
          type: string
          description: Identificador único do webhook. Obrigatório apenas quando estiver consultando ou alterando
        url:
          type: string
          description: Endereço (URL) do webhook a ser chamado pelo sistema
          example: http://www.meudominio.com.br/webhook
    Error: 
        type: object
        properties: 
          status_code: 
            type: integer
            description: HTTP status code
          request_id:
            type: string
            description: Correlation ID
            nullable: true
          description: 
            type: string
            description: Message error
          detail:
            type: object
            description: Complementary object
    ReturnCobranca: 
        type: object
        properties: 
          status_code: 
            type: integer
            description: HTTP status code
          request_id:
            type: string
            description: Correlation ID
            nullable: true
          json: 
            type: object
            description: Cobranca object
            oneOf:
                  - $ref: '#/components/schemas/Cobranca'
    ReturnWebhook: 
        type: object
        properties: 
          status_code: 
            type: integer
            description: HTTP status code
          request_id:
            type: string
            description: Correlation ID
            nullable: true
          json: 
            type: array
            description: Webhook object
            items:
              type: object
              $ref: '#/components/schemas/Webhook'

paths:
  
  /cobranca/{idCobranca}:
    get:
      description: Consulta uma cobrança
      tags: 
        - cobranca
      security:
        - API Key: []
        - Autenticação Bearer: []
      parameters:
        - in: path
          name: idCobranca
          schema:
            type: string
          required: true
          description: Identificação única da cobrança.
      responses:
        200:
          description: Cobrança encontrada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnCobranca"
        404:
          description: Cobrança não encontrada.
          $ref: "#/components/responses/NotFound"
        501:
          $ref: "#/components/responses/NotImplemented"
    delete:
      description: Exclui uma cobrança
      tags: 
        - cobranca
      security:
        - API Key: []
        - Autenticação Bearer: []
      parameters:
        - in: path
          name: idCobranca
          schema:
            type: string
          required: true
          description: Identificação única da cobrança.
      responses:
        200:
          description: Cobrança excluída com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnCobranca"
        404:
          descricao: Cobrança não encontrada.
          $ref: "#/components/responses/NotFound"
        501:
          $ref: "#/components/responses/NotImplemented"
  /cobranca:
    post:
      summary: Cadastra uma cobrança
      description: Cadastra uma cobrança. É por meio dela que você pode receber via Pix ou boleto bancário.
      tags: 
        - cobranca
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cobranca'
      security:
        - API Key: []
        - Autenticação Bearer: []
      responses:
        200:
          description: Cobrança cadastrada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnCobranca"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    get:
      description: Consulta cobranças
      tags: 
        - cobranca
      security:
        - API Key: []
        - Autenticação Bearer: []
      responses:
        200:
          description: Lista as cobranças cadastradas para a conta.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cobranca"
        501:
          $ref: "#/components/responses/NotImplemented"
    put:
      summary: Edita uma cobrança
      description: Recurso que permite alterar uma cobrança.
      tags: 
        - cobranca
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cobranca'
      security:
        - API Key: []
        - Autenticação Bearer: []
      responses:
        200:
          description: Cobrança alterada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnCobranca"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /webhook/{idCobranca}:
    get:
      description: Consulta um webhook
      tags: 
        - webhook
      security:
        - API Key: []
        - Autenticação Bearer: []
      parameters:
        - in: path
          name: idWebhook
          schema:
            type: string
          required: true
          description: Identificação única do webhook
      responses:
        200:
          description: Webhook encontrado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnWebhook"
        404:
          description: Webhook não encontrado
          $ref: "#/components/responses/NotFound"
        501:
          $ref: "#/components/responses/NotImplemented"
    delete:
      description: Exclui um webhook
      tags: 
        - webhook
      security:
        - API Key: []
        - Autenticação Bearer: []
      parameters:
        - in: path
          name: idWebhook
          schema:
            type: string
          required: true
          description: Identificação única do webhook
      responses:
        200:
          description: Webhook excluída com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnWebhook"
        404:
          descricao: Webhook não encontrado
          $ref: "#/components/responses/NotFound"
        501:
          $ref: "#/components/responses/NotImplemented"
  /webhook:
    post:
      summary: Cadastra um webhook
      description: Cadastra um webhook. Um webhook é uma url a ser chamada a cada evento de alteração nas entidades do projeto
      tags: 
        - webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      security:
        - API Key: []
        - Autenticação Bearer: []
      responses:
        200:
          description: Webhook cadastrado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnWebhook"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    get:
      description: Consulta webhooks
      tags: 
        - webhook
      security:
        - API Key: []
        - Autenticação Bearer: []
      responses:
        200:
          description: Lista os webhook cadastrados para a  conta
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/ReturnWebhook"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Edita um webhook
      description: Recurso que permite alterar um webhook
      tags: 
        - webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      security:
        - API Key: []
        - Autenticação Bearer: []
      responses:
        200:
          description: Webhook alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnWebhook"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

security:
  - Autenticação Básica: []
  - Autenticação Bearer: []
  - API Key: []

  